//Stake.com
//https://playstake.io/
//https://playstake.info/
//Crash
//User

var style = `<style>
canvas{
	-moz-user-select:none;
	-webkit-user-select:none;
	-ms-user-select:none
}
.boxDice{
	//border:1px solid white;
	border-radius:0px;
	//margin-top:3px;
	padding-bottom:5px;
	width: 900px;
	background-color:black;
	//color:whitesmoke;
	font-family:"Open Sans","Helvetica Neue",Helvetica,Arial,sans-serif;
	z-index:10000 ;
	//position:absolute;
	position:block;
	//top: 0px;
	top: 0;
	//right:0;
	left:0;
	opacity: 0.9;
}

.boxTitle{
	text-align:center;
	padding:8px 8px 5px 8px;
	font-weight:bold;
	border-bottom:solid#181a1e
}

.boxScon{
	text-align:center;
	padding:10px 8px 5px 8px;
	border-bottom:solid#181a1e
}
.boxStatus{
	padding:5px 0;
	background-color:#101215;
	width:100%;
//	font-size:12.5px!important;
	border:0;
	color:white;
	text-transform:uppercase;
	text-align:center;
}

.boxTDtitle{
	width:100px;
	padding:3px;
	color:whitesmoke;
	text-align:center;
	font-size:15px;
}
.boxTDinput{
	padding:3px;
	background-color:#8A9BAA;
	width:97%;
	border:1px solid white;
	border-radius:10px;
	text-aligh:center;
	color:white!important;
	margin:2px 0;
}
.boxDS{
	width:110px;
	//align: center;
	padding:3px;
	text-aligh:center;
}

.boxButton{
	width:80%;
	background-color:#46B9D8;
	border:1px solid white;
	border-radius:10px;
	color:white;
	padding:7px 15px;
	margin-left:10px;
	text-align:center;
	text-decoration:none;
	display:inline-block;
	font-size:13px
}

#refurl{
	font-size:18px!important;
	color:yellow!important
}
#_playtime{
//	float:right!important;
	font-size:15px!important;
	font-weight:bold;
	text-align: center;
	color:yellow!important
}

#_start{
	width:100px;
	color:green;
	font-weight:bold;
	padding:3px;
}
#_seed{
	width:150px;
	color:white;
	font-weight:bold;
	padding:3px;
}
#_bot{
	width:150px;
	color:white;
	font-weight:bold;
	padding:3px;
}

.InputBox{
	width: 110px;
	//padding:3px;
	//padding: 1rem;
	padding: 0.1rem;
	border-radius:5px;
	border:1px solid white;
	//border: 2px dotted rgb(177, 186, 211);
	//border: 2px dotted white;
	//background:#01254E;
	background:rgb(15, 33, 46);
	color:white;
	text-align:center;
	font-size: 15px;
	transition:1s;
}
.TextButton{
	border:1px solid white;
	border-radius:10px;
	//background:#01254E;
	background:rgb(15, 33, 46);
	color:'green';
	width: 100px;
	padding-left:10px;
	padding-right:10px;
	cursor:pointer;
	transition:1s;
	margin: 5px;
}

#coin{
	font-size: 20px;
	color: #F18C18;
}	
#_status{
	background:black;	
	font-family: Garamond, serif;
	line-height: 1em;
	color: #01ff3f ;                #009000;
	font-weight:bold;
	font-size: 28px;
	text-shadow:0px 0px 0 rgb(-92,36,-92),1px 1px 0 rgb(-137,-9,-137), 2px 2px 0 rgb(-182,-54,-182),3px 3px 2px rgba(0,0,0,0.6),3px 3px 1px rgba(0,0,0,0.5),0px 0px 2px rgba(0,0,0,.2);
}

.left {
    float: left;
    color: white;
}

* {
    margin: 0;
    padding: 0;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    font-size: 15px;
    font-weight: 500;
    font-family: Open Sans;
    scrollbar-width: none;
    //text-align: center;
    //color: white;
}

.common_wrap {
    margin-top: 4px;
    height: 42px;
    line-height: 42px;
    background: #273653;
    border-radius: 5px;
    text-align: center;
    color: white;
}	
[type="checkbox"], [type="radio"] {
    box-sizing: border-box;
    padding: 0;
}
input[type="checkbox" i] {
    background-color: initial;
    cursor: default;
    appearance: checkbox;
    box-sizing: border-box;
    //margin: 3px 3px 3px 4px;
    padding: initial;
    border: initial;
}
input[type="radio" i] {
    background-color: initial;
    cursor: default;
    appearance: radio;
    box-sizing: border-box;
    //margin: 3px 3px 0px 5px;
    padding: initial;
    border: initial;
}

#log{
	font-size:15px;
	color:white;
	background:transparent;
	overflow:auto;
	text-align:left;
	//float:right;
	//margin-top:20px;
	padding:3px;
	//border:1px solid grey;
	//border-top-left-radius:3px;
	//border-bottom-left-radius:3px;
	//height:300px; 
	//border:2 solid #181a1e;
}

.inputFields {
	//margin: 15px 0;
	margin: 3px;
	font-size: 15px;
	//padding: 3px;
	border:1px solid white;
	//border-top: none;
	//border-left: none;
	//border-right: none;
	//background: rgba(20, 20, 20, 0.2);
	color: white;
	//outline: none;
	//border: 2px dotted white;
	//padding: 0.1rem;
	border-radius:5px;
	background:rgb(15, 33, 46);
	width: 110px;
}
select option {
	background: #2E4053;
}
select {
	text-align: center;
	text-align-last: center;
	/* webkit*/
}

</style>`;

var html = `<div class="boxDice" id="isDynamic">
	<table width="100%"border="0"cellspacing="0"cellpadding="5">
		<!-- div class="boxTitle"id="isDynamic"><span id="refurl"></span></div -->
		<!-- div class="boxScon"><span id="coin"></span><span class="boxStatus" type="text" id="_status">0.00000000 [0.00%]</span></div -->
		<!-- div class="boxScon"><span id="coin">...</span></div -->
			<tbody>
			<tr>
				<td class="boxTDtitle">Base Bet (Patterns)</td>
				<td class="boxTDtitle">Bet = Balance (Patterns)</td>
				<td class="boxTDtitle">Cashout At (Patterns)</td>
				<td class="boxTDtitle">Cashout At (Martingale)</td>
				<td class="boxTDtitle">Multiply Bet (Martingale)</td>
				<td class="boxTDtitle">Stop On Trigger</td>
				<td class="boxTDtitle">Reset Seed On Trigger</td>
				<td class="boxTDtitle">Stop On Profit</td>
			</tr>
			<tr>
                <td class="boxDS"><input class="StandardTextBox InputBox" type="text" id="basebet" value="0.00000001"></td>
				<td style="text-align:center;"> <input class="StandardCheckBox pimp" id="allBalance" style="font-size:15px; text-align:center;" type="checkbox"></td>
				<td class="boxDS"><input class="StandardTextBox InputBox" type="text" id="payout1" value="1.10"></td>
				<td class="boxDS"><input class="StandardTextBox InputBox" type="text" id="payout2" value="2.00"></td>
				<td class="boxDS"><input class="StandardTextBox InputBox" type="text" id="multBet" value="2.00"></td>
				<td class="boxDS"><input class="StandardTextBox InputBox" type="text" id="trigger" value="100"></td>
				<td style="text-align:center;"> <input class="StandardCheckBox pimp" id="seedTrigger" style="font-size:15px; text-align:center;" type="checkbox"></td>
				<td class="boxDS"><input class="StandardTextBox InputBox" type="text" id="profitStop" value="1000000"></td>
			</tr>
			
			<tr>
				<td>
		            <!--label for="coin"><img id="_coin_" src="/img/btc.svg" alt="currency" style="width: 25px; height: 25px; display: inline-block; vertical-align: middle; position: absolute;margin: 23px 10px"></label-->
		            <select class="inputFields" id="currentCoin">
						<option value="">--Coin--</option>
						<option value="btc">BTC</option>
						<option value="eth">ETH</option>
						<option value="ltc">LTC</option>
						<option value="usdt">USDT</option>
						<option value="doge">DOGE</option>
						<option value="bch">BCH</option>
						<option value="xrp">XRP</option>
						<option value="eos">EOS</option>
						<option value="trx">TRX</option>
						<option value="bnb">BNB</option>
						<option value="usdc">USDC</option>
						<option value="jpy">JPY</option>
						<option value="brl">BRL</option>
						<option value="cad">CAD</option>
						<option value="ape">APE</option>
						<option value="busd">BUSD</option>
						<option value="cro">CRO</option>
						<option value="dai">DAI</option>
						<option value="link">LINK</option>
						<option value="matic">MATIC</option>
						<option value="sand">SAND</option>
						<option value="shib">SHIB</option>
						<option value="uni">UNI</option>
						<option value="gold">GOLD(.us)</option>
						<option value="sweeps">SWEEPS(.us)</option>
		            </select>
		        </td>
				<td>
		            <!--label for="coin"><img id="_coin_" src="/img/btc.svg" alt="currency" style="width: 25px; height: 25px; display: inline-block; vertical-align: middle; position: absolute;margin: 23px 10px"></label-->
		            <select class="inputFields" id="mirror">
						<option value="stake.com">stake.com</option>
						<option value="stake.games">stake.games</option>
						<option value="stake.bet">stake.bet</option>
						<option value="staketr.com">staketr.com</option>
						<option value="staketr2.com">staketr2.com</option>
						<option value="staketr3.com">staketr3.com</option>
						<option value="staketr4.com">staketr4.com</option>
						<option value="staketr5.com">staketr5.com</option>
						<option value="stake.bz">stake.bz</option>
						<option value="stake.jp">stake.jp</option>
						<option value="stake.ac">stake.ac</option>
						<option value="stake.icu">stake.icu</option>
						<option value="stake.kim">stake.kim</option>
						<option value="staketr2.site">staketr2.site</option>
						<option value="stake.us">stake.us</option>
		            </select>
		        </td>
				<td class="boxDS"><input class="StandardTextBox InputBox" type="text" id="token" placeholder="API Key" value=""></td>
				
				<!--
				<td>
		            <select class="inputFields" id="game">
						<option value="1">Patterns</option>
						<option value="2">Martingale</option>
		            </select>
		        </td>
				-->
				
			</tr>
			
		</tbody>
	</table>
	<div style="font-size:1px; text-align:center; border-bottom:solid#181a1e;"><span> </span></div>
	<div id="statistic" style="height:70px; font-size:15px; text-align:center; color:white; padding:3px; border: 2 solid #181a1e;">...</div>	
	<div style="font-size:1px; text-align:center; border-bottom:solid#181a1e;"><span> </span></div>
	<div id="log" style="height:380px; border: 2 solid #181a1e;">...</div>	
	<div style="font-size:1px; text-align:center; border-bottom:solid#181a1e;"><span> </span></div>
	<table width="100%" border="0" cellspacing="0" cellpadding="5">		
		<tr>		
			<td class="boxTDtitle">Play Time </td>
			<td align="center"><span id="_playtime">00:00:00</span></td>
			<td align="center"><input type="button" id="_start" class="TextButton" value="START"/></td>
			<td align="center"><input type="button" id="_seed" class="TextButton" value="Reset Seed"/></td>
			<td align="center"><input type="button" id="_bot" class="TextButton" value="Reload Bot"/></td>
        </tr>
     </tbody>
   </table>
</div>`;

/*
function addClick(){
$('.pimp').click(function() {
    if ($('#allBalance').is(":checked")) {
        $("#basebet").attr("disabled", true);
    } else {
        $("#basebet").removeAttr("disabled");
    }
})
}
*/

/*
var script = document.createElement('script');
script.src = "https://code.jquery.com/jquery-3.6.0.min.js";
//script.src = "https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js";
document.head.append(script);
script.onload = (function() {
*/
    ///$('head').append(style);
    ///$('body').append(html);
	var refurl = "Crash Bot";
    //$('#refurl').html(refurl);
	
	//$('#coin').html(currency.toUpperCase());
	
	//addClick();
	
	/*
	//Внутри jquery
	document.getElementById("_seed").onclick = function(){ runSeed = true; resetSeed(); } //Так для расширения
	document.getElementById("_bot").onclick = function(){ resetBot() } //Так для расширения
	document.getElementById("_start").onclick = function(){ startDice() } //Так для расширения
	*/
	
	/*
	//----------------------------
    var box_position, offsetBox = [0, 0],
        isDrag = false,
        source, dynamic;
    source = document.getElementsByClassName('boxDice')[0];
    dynamic = document.getElementById('isDynamic');
    dynamic.addEventListener('mousedown', function(e) {
        isDrag = true;
        offsetBox = [source.offsetLeft - e.clientX, source.offsetTop - e.clientY]
    }, true);
    document.addEventListener('mouseup', function() {
        isDrag = false
    }, true);
    document.addEventListener('mousemove', function(event) {
        if (isDrag) {
            box_position = {
                x: event.clientX,
                y: event.clientY
            };
            source.style.left = (box_position.x + offsetBox[0]) + 'px';
            source.style.top = (box_position.y + offsetBox[1]) + 'px'
        }
    }, true);
	//--------------------------------
	*/
	
var dps = [];
var chart = '';
var bets = 0;
var colorChart = '';

		dps = [{
			x: 0,
			y: 0
		}
		];
		chart = new CanvasJS.Chart('myChart', {
			backgroundColor: "transparent",
			theme: 'light2',
			zoomEnabled: true,
			axisX: {
				title: 'Bets',
				includeZero: false,
			},
			axisY: {
				title: 'Profit',
				includeZero: false,
			},
			title: {
				//text: 'Space X',
				fontColor: '#2eab5b',
				fontSize: 2e1,
				padding: 2e1
			},
			data: [{
				type: 'line',
				//color: "gold",
				dataPoints: dps
				}
			]
		});
		chart.render();
		
function updateChart(bets, profit, color) {
	dps.push({
		x: bets,
		y: profit,
		color: color
	});
	if (dps[dps.length - 2]) {
		dps[dps.length - 2].lineColor = color;
	}
	if (dps.length > 1e3) {
		dps.shift();
	}
	chart.render();
}

//})


///----------------------------
//Low Risk - 01

var config = {
	baseBet: {
        value: 0.00000000 //Begin bet
    },
    basePayout: {
        value: 2 //Begin Payout
    },
    winRepeat: {
        value: 1 //Win Repeat
    },
    stop: {
        value: 1000000000000 //stop if bet >
    },
    lossSeriesSet: {
        value: 1 // 1-on, 0-off
    },
    lossBetSeries: {
        value: '2/3/4/5' //Bet multipliers Series
    },
    lossPoSeries: {
        value: '1.9/1.8/1.7/1.6' //Payout Series
    },
    winSeriesSet: {
        value: 1 // 1-on, 0-off
    },
    winBetSeries: {
        value: '2/2/2/2' //Bet multipliers Series
    },
    winPoSeries: {
        value: '2.5/2.6/2.7/2.8' //Payout Series
    },
    beginSeriesSet: {
        value: 1 //1-Play if there is a lost game before, 0-Everytime play the list
    },
    continueSeriesSet: {
        value: 1 //1-Continue in the same order of the list, 0-Continue in the top of the list
    },
    endSeriesSet: {
        value: 1 //1-Back to top repeat, 0-Continue from last value
    },
    checkListMode: {
        value: 0 // 1-on, 0-off
    }
};

///function main() {

    var beginBet = config.baseBet.value;
    var beginPayout = config.basePayout.value;
    var currentBet = beginBet;
    var currentPayout = beginPayout;
    var lossSeriesSet = config.lossSeriesSet.value;
    var lossBetSeries;// = config.lossBetSeries.value.split("/");
    var lossPoSeries;// = config.lossPoSeries.value.split("/");
    var winSeriesSet = config.winSeriesSet.value;
    var winBetSeries;// = config.winBetSeries.value.split("/");
    var winPoSeries;// = config.winPoSeries.value.split("/");
    var winRepeat = config.winRepeat.value;
    var beginStatus = config.beginSeriesSet.value;
    var contStatus = config.continueSeriesSet.value;
    var endStatus = config.endSeriesSet.value;
    var checkModeStatus = config.checkListMode.value;
    var lossStatus = 0;
    var winStatus = 0;
    var baseStatus = 1;
    var gameCount = 0;
    var repProvision = 0;
    var repValidCount = 0;
    var matchValidEquals = 0;
    var matchValidGreater = 0;
    var matchValidLess = 0;
/*
function firstRunCheck() {
    if (checkModeStatus) {
        checkList();
        stopp();
        return;
    }
    matchCheckGreaterEqualsLess(lossBetSeries.length, lossPoSeries.length);
    if (matchValidEquals) {
        matchValidRestore();
    } else {
        matchValidRestore();
        //log.error('Bets and payouts do not matched, bets and payouts must be the same amount.')
		log('<font style="color:red;font-size:15px;">Bets and payouts do not matched, bets and payouts must be the same amount.</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
        stopp();
        return;
    }
}

    ///game.onBet = function () {
	function mainBet() {
        //log.success('Game Starting, Bet: ' + currentBet + 'Payout: '+ currentPayout)
        ///log('<font style="color:green;font-size:15px;">Game Starting, Bet: ' + currentBet + 'Payout: '+ currentPayout +'</font>');
		///$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		
        ///game.bet(currentBet, currentPayout).then(function (payout) {
      
        // Win
        //if (payout > 1) {
		if (win) {
			
            if (!contStatus) {
                if (!winStatus) {
                    counterReset();
                }
            } else {
                if (!beginStatus) {
                    if (lossStatus) {
                        lossStatus--;
                    }
                }
            }

            if (!winStatus) {
                winStatus++;
            }
            if (baseStatus) {
                baseStatus--;
                counterReset();
            }

            if (!winSeriesSet) {
                gameStarter(beginBet, beginPayout);
                if (!baseStatus) {
                    baseStatus++;
                }
            } else {
                if (beginStatus && lossStatus) {
                    matchCheckGreaterEqualsLess(gameCount, winBetSeries.length);
                    if (matchValidEquals || matchValidGreater) {
                        matchValidRestore();
                        if (!endStatus) {
                            gameStarter(parseFloat(winBetSeries[winBetSeries.length - 1]), parseFloat(winPoSeries[winBetSeries.length - 1]));
                        } else {
                            counterReset();
                            gameStarter(parseFloat(winBetSeries[gameCount]), parseFloat(winPoSeries[gameCount]));
                        }
                    } else {
                        matchValidRestore();
                        gameStarter(parseFloat(winBetSeries[gameCount]), parseFloat(winPoSeries[gameCount]));
                    }
                } else {
                    if (!beginStatus) {
                        matchCheckGreaterEqualsLess(gameCount, winBetSeries.length);
                        if (matchValidEquals || matchValidGreater) {
                            matchValidRestore();
                            if (!endStatus) {
                                gameStarter(parseFloat(winBetSeries[winBetSeries.length - 1]), parseFloat(winPoSeries[winBetSeries.length - 1]));
                            } else {
                                counterReset();
                                gameStarter(parseFloat(winBetSeries[gameCount]), parseFloat(winPoSeries[gameCount]));
                            }
                        } else {
                            matchValidRestore();
                            gameStarter(parseFloat(winBetSeries[gameCount]), parseFloat(winPoSeries[gameCount]));
                        }
                    } else {
                        gameStarter(beginBet, beginPayout);
                        if (!baseStatus) {
                            baseStatus++;
                        }
                    }
                }
            }

            //log.success('You Win!!');
			log('<font style="color:green;font-size:15px;">Win</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
            gameCount++;
            repValidCount++;
            repProvision--;
            matchCheckGreaterEqualsLess(repValidCount, winRepeat);
            if (matchValidEquals || matchValidGreater) {
                matchValidRestore();
                if (lossStatus) {
                    lossStatus--;
                }
            }

        } else {
            // Loss
            if (!contStatus) {
                if (winStatus) {
                    counterReset();
                }
            }

            if (!lossStatus) {
                lossStatus++;
            }

            if (winStatus) {
                winStatus--;
            }
            if (baseStatus) {
                baseStatus--;
                counterReset();
            }

            if (!lossSeriesSet) {
                gameStarter(beginBet, beginPayout);
                if (!baseStatus) {
                    baseStatus++;
                }
            } else {
                matchCheckGreaterEqualsLess(gameCount, lossBetSeries.length);
                if (matchValidEquals || matchValidGreater) {
                    matchValidRestore();
                    if (!endStatus) {
                        gameStarter(parseFloat(lossBetSeries[lossBetSeries.length - 1]), parseFloat(lossPoSeries[lossBetSeries.length - 1]));
                    } else {
                        counterReset();
                        gameStarter(parseFloat(lossBetSeries[gameCount]), parseFloat(lossPoSeries[gameCount]));
                    }
                } else {
                    matchValidRestore();
                    gameStarter(parseFloat(lossBetSeries[gameCount]), parseFloat(lossPoSeries[gameCount]));
                }

                //log.error('You Loss');
				log('<font style="color:red;font-size:15px;">Loss</font>');
				$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
                gameCount++;
                winRepCountReset();
            }
        }

    ///})
}

    function gameStarter(calculatedBet, calculatedPayout) {
        if (currentBet > config.stop.value) {
            //log.error('Maximum amount reached, Script stopped.');
			log('<font style="color:red;font-size:15px;">Maximum amount reached, Script stopped.</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
            stopp();
			return;
        }
        //log.info('betting');
		log('<font style="color:white;font-size:15px;">betting</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
        currentBet = calculatedBet;
        currentPayout = calculatedPayout.toFixed(2);
    }

    function checkList() {
        var i;
        //log.info('----------CHECK LIST----------');
		log('<font style="color:white;font-size:15px;">----------CHECK LIST----------</font>');
        //log.success('First Game, Base Bet: ' + beginBet + ' Base Payout: ' + beginPayout);
		log('<font style="color:green;font-size:15px;">First Game, Base Bet: ' + beginBet + ' Base Payout: ' + beginPayout +'</font>');
        if (lossSeriesSet) {
            //log.info('Loss game list mode on');
			log('<font style="color:white;font-size:15px;">Loss game list mode on</font>');
            matchCheckGreaterEqualsLess(lossBetSeries.length, lossPoSeries.length);
            if (matchValidEquals) {
                matchValidRestore();
                //log.info('Bets and payouts matched')
				log('<font style="color:white;font-size:15px;">Bets and payouts matched</font>');
                seriesList(lossBetSeries, lossPoSeries);
            } else {
                matchValidRestore();
                //log.error('Bets and payouts do not matched, bets and payouts must be the same amount.');
				log('<font style="color:red;font-size:15px;">Bets and payouts do not matched, bets and payouts must be the same amount.</font>');
            }
        } else {
            //log.error('Loss game list mode off');
			log('<font style="color:red;font-size:15px;">Loss game list mode off</font>');
        }

        if (winSeriesSet) {
            //log.info('Win game list mode on');
			log('<font style="color:white;font-size:15px;">Win game list mode on</font>');
            matchCheckGreaterEqualsLess(winBetSeries.length, winPoSeries.length);
            if (matchValidEquals) {
                matchValidRestore();
                //log.info('Bets and payouts matched');
				log('<font style="color:white;font-size:15px;">Bets and payouts matched</font>');
                seriesList(winBetSeries, winPoSeries);
            } else {
                matchValidRestore();
                //log.error('Bets and payouts do not matched other, bets and payouts must be the same amount.');
				log('<font style="color:red;font-size:15px;">Bets and payouts do not matched other, bets and payouts must be the same amount.</font>');
            }

        } else {
            //log.error('Win game list mode off');
			log('<font style="color:red;font-size:15px;">Win game list mode off</font>');
        }
        //log.info('Begin of list mode:');
		log('<font style="color:white;font-size:15px;">Begin of list mode:</font>');
        //log.success(beginStatus ? 'Play if there is a lost game before' : 'Everytime play the list');
		var _beginStatus = beginStatus ? 'Play if there is a lost game before' : 'Everytime play the list';
		log('<font style="color:green;font-size:15px;">'+_beginStatus+'</font>');
        //log.info('End of list mode:');
		log('<font style="color:white;font-size:15px;">End of list mode:</font>');
        //log.success(endStatus ? 'Back to top repeat' : 'Continue from last value');
		var _endStatus = endStatus ? 'Back to top repeat' : 'Continue from last value';
		log('<font style="color:green;font-size:15px;">'+_endStatus+'</font>');
        //log.info('Continue of list mode:');
		log('<font style="color:white;font-size:15px;">Continue of list mode:</font>');
        //log.success(contStatus ? 'Continue from the game in the same order of the list' : 'Play from the top of the list');
		var _contStatus = contStatus ? 'Continue from the game in the same order of the list' : 'Play from the top of the list';
		log('<font style="color:green;font-size:15px;">'+_contStatus+'</font>');
        //log.info('If there is a lost game in the game before the winning match,');
		log('<font style="color:white;font-size:15px;">If there is a lost game in the game before the winning match,</font>');
        //log.success('plays ' + winRepeat + ' games ');
		log('<font style="color:green;font-size:15px;">plays ' + winRepeat + ' games </font>');
        //log.info('from the win game list.');
		log('<font style="color:white;font-size:15px;">from the win game list.</font>');
        //log.error('Available only when "Play if game lost before" starting mode is set option is selected.');
		log('<font style="color:red;font-size:15px;">Available only when "Play if game lost before" starting mode is set option is selected.</font>');
        //log.info('End of check list');
		log('<font style="color:white;font-size:15px;">End of check list</font>');
		
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
    }

    function counterReset() {
        if (!gameCount) {
            return;
        }
        gameCount--;
        counterReset();
    }

    function winRepCountReset() {
        if (!repProvision) {
            return;
        }
        repValidCount--;
        repProvision++;
        if (!repProvision) {
            return;
        }
        winRepCountReset();
    }

    function matchCheckGreaterEqualsLess(listOne, listTwo) {
        if (!listOne || !listTwo) {
            if (!listTwo && !listOne) {
                matchValidEquals++;
                return;
            } else {
                if (!listOne) {
                    matchValidLess++;
                    return;
                } else {
                    matchValidGreater++;
                    return;
                }
            }
        }
        listOne--;
        listTwo--;
        matchCheckGreaterEqualsLess(listOne, listTwo);
    }

    function matchValidRestore() {
        if (matchValidEquals) {
            matchValidEquals--;
        }
        if (matchValidGreater) {
            matchValidGreater--;
        }
        if (matchValidLess) {
            matchValidLess--;
        }
    }

///}

function seriesList(listOne, listTwo) {
    listLenghtIdentfy(listOne.length, listTwo.length, 1);
    function listLenghtIdentfy(listOneLength, listTwoLenght, listCount) {
        log.success('Game' + listCount + ' Bet: ' + listOne[listCount - 1] + ' Payout: ' + listTwo[listCount - 1]);
		log('<font style="color:green;font-size:15px;">Game' + listCount + ' Bet: ' + listOne[listCount - 1] + ' Payout: ' + listTwo[listCount - 1] + '</font>');
        listOneLength--;
        listTwoLenght--;
        listCount++;
        if (!listOneLength) {
            return;
        }
        listLenghtIdentfy(listOneLength, listTwoLenght, listCount);
    }}
*/
//Low Risk - 01
///-----------------------


var refurl = "Crash Bot";
var _start = 0;
var date = new Date();
var startdate = date;
var startTime = new Date();
var playTimer;
var runLog = 0;
var goLog = 0;
///------------------
var basebet = 0.00000001; // Working bet - Pattern
var payout1 = 1.10; // Working Multiplier (Cashout At) - Pattern
var payout2 = 2.00; // Working Multiplier (Cashout At) - Martingale
var payout = 10.00;
var streakBelow = 20;
var increaseLose = 12.00;
var streakBelowCur = 0;
var maxstreakBelow = 0;
///------------------
//var currency = "ltc"; // Coin - btc,eth,ltc,doge,bch,xrp,trx,eos,bnb,usdt,brl,cad,jpy ...
var amount = 0;
var errTrue = false; //color background
var gameNumber = 0;
var trigger = 1;
var triggers = 0;
var strategy = '';
//-----------------------
var mirror = 'stake.com'; // Mirror: stake.bet, stake.games, staketr.com, staketr2.com, staketr3.com, staketr4.com, staketr5.com, stake.bz, stake.jp, stake.ac, stake.icu;
var token = ''; // API Key API Key -- -> Settings -> API
var currency = ''; // Coin - btc,eth,ltc,doge,bch,xrp,trx,eos,bnb,usdt,brl,cad,jpy ...

if (localStorage.getItem("api_key") != null) {
	document.getElementById("token").value = localStorage.getItem("api_key");
	//token = localStorage.getItem("api_key");
}	
if (localStorage.getItem("mir_ror") != null) {
	document.getElementById("mirror").value = localStorage.getItem("mir_ror");
}
if (localStorage.getItem("curr_ency") != null) {
	document.getElementById("currentCoin").value = localStorage.getItem("curr_ency");
}

var bet = basebet;
var balancePerc = 0.01;
var firstBet = true;
var balance = 0; //parseFloat(document.querySelector("div > div > div > button > span > div > div > span > span").innerText);
var startBalance = balance;
var lastBalance = balance;
var llastBalance = balance;
var lllastBalance = balance;
var last_balance = balance;
var run = false;
var runSeed = true;
var roundWin = 0;
var roundLose = 0;
var profit = 0;
var profitTotal = 0;
var profitStop = 0;
var maxLoseAmount = 0;
var maxBetAmount = 0;
var multBet = 1.00;
var wagered = 0;
var maxBet = 0;
var maxLose = 0;
var consClear = 0;
var runRes = false;
var win = true;
var prevBet = bet;
var checkBal = false;
var checkBall = false;
var checkBalance = true;
var resTrue = false;
var startFirst = true;
var err = false;
var historyHash = '';
var historyHashHash = '';
var crashpoint1 = '';
var hashhash1 = '';
var historyPoint = '';
var historyPointPoint = '';
var startDataHistory = true;
var goBet = false;
var curHistory = 0;
var firstGo = 0;
var firstGoTrue = true;
var goRun = false;
var checkBet = false;
var pat = [];
var patLast5 = [];
var patternReset = 0;
var patternGood = 0;
var game = 1; // 1-pattern, 2-martingale
var firstMartin = 0;
var firstMartinPat = false;

var firstMainBetBet = 0;
var firstMainBet = false;
var finishBetTrue = false;

var lastHash = ['placeholder'];
var expiredHash = ['placeholder2'];
var crashPoint = [0];

var waitBet = setInterval(function() {
    //doBet();
}, 1000);
clearInterval(waitBet);
var waitBetTime = setInterval(function() {
    //doBet();
}, 1000);
clearInterval(waitBetTime);
var goBetBet = setInterval(function() {
    //doBet();
}, 1000);
clearInterval(goBetBet);
var waitBalance = setInterval(function() {
    //doBet();
}, 1000);
clearInterval(waitBalance);


// COLORS 
function red(s) {
    return '\033[31m' + s;
}
//console.log(red('Error!'));
function yellow(s) {
    return '\x1b[33m' + s;
}
function green(s) {
    return '\x1b[32m' + s;
}
function cyan(s) {
    return '\033[36m' + s;
}
function blue(s) {
    return '\033[34m' + s;
}


///User-------------------

var runs = true;
var _xa7d8ac5 = ''; // User
var conf={
	a:0,
	b:!1
}	
function _x0ca42f0(cb) {
	var _x0cd36a5 = _xa7d8ac5;
	var _x0bc149a = false;
	var _x0da348e = '';
	$.get('https://raw.githubusercontent.com/EVNEVN/stake/master/bot-user', function (_x04ad97d, status) {}).done(function (_x04ad97d) {
		_x0da348e = JSON.parse(_x04ad97d);
		for (var i = 0; i < _x0da348e.length; i++)
			if (_x0da348e[i].toUpperCase() == _x0cd36a5.toUpperCase()) _x0bc149a = true;
			if (_x0bc149a == true) {
				conf.b = !0; //true
				
			}else{
				conf.b = !1; //false
				
				run = false;
				//clearInterval(playTimer);
				//clearInterval(waitBet);
				
				//$(".app_content").remove();
				//$("#app").remove();
				//$("#autobetbox").remove();
				alert('You do not have permission to use this bot! Contact the developer!');
				log('You do not have permission to use this bot! Contact the developer!');
				//window.open('https://www.youtube.com/channel/UCxD_rH3cgWkuKCEL2TFhYiQ?view_as=subscriber');
				//window.open('https://cos.tv/home/dist/personal.html#/creation?uid=16516022185142272');
				//location.reload();
				//window.location.reload();
				
			}
		cb();
	});
}
function _x0f1add2(cb){
function _x0f1add1(){
fetch("https://"+mirror+"/_api/graphql", {
  "headers": {
    //"accept": "",
    //"accept-language": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7",
    "content-type": "application/json",
    //"sec-ch-ua": "\" Not;A Brand\";v=\"99\", \"Microsoft Edge\";v=\"91\", \"Chromium\";v=\"91\"",
    //"sec-ch-ua-mobile": "?0",
    //"sec-fetch-dest": "empty",
    //"sec-fetch-mode": "cors",
    //"sec-fetch-site": "same-site",
    "x-access-token": token
    //"x-language": "ru",
    //"x-lockdown-token": ""
  },
  //"referrer": "https://"+$('#mirror').val()+"/",
  //"referrerPolicy": "strict-origin-when-cross-origin",
  "body": "{\"operationName\":\"initialUserRequest\",\"variables\":{},\"query\":\"query initialUserRequest {\\n  user {\\n    ...UserAuth\\n    __typename\\n  }\\n}\\n\\nfragment UserAuth on User {\\n  id\\n  name\\n  email\\n  hasPhoneNumberVerified\\n  hasEmailVerified\\n  hasPassword\\n  intercomHash\\n  createdAt\\n  hasTfaEnabled\\n  mixpanelId\\n  hasOauth\\n  flags {\\n    flag\\n    __typename\\n  }\\n  roles {\\n    name\\n    __typename\\n  }\\n  balances {\\n    ...UserBalanceFragment\\n    __typename\\n  }\\n  activeClientSeed {\\n    id\\n    seed\\n    __typename\\n  }\\n  previousServerSeed {\\n    id\\n    seed\\n    __typename\\n  }\\n  activeServerSeed {\\n    id\\n    seedHash\\n    nextSeedHash\\n    nonce\\n    blocked\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment UserBalanceFragment on UserBalance {\\n  available {\\n    amount\\n    currency\\n    __typename\\n  }\\n  vault {\\n    amount\\n    currency\\n    __typename\\n  }\\n  __typename\\n}\\n\"}",
  "method": "POST"
  //"mode": "cors",
  //"credentials": "omit"
}).then(response => {
	return response.json();
//}).then(function(data) {
}).then(data => {	
    console.log(data); 
	if (data.errors) {
		console.log(red('Error'));
		console.log(red('Error: ' +data.errors));
		console.log(red('==========='));

		log('<font style="color:red;font-size:15px;">Error: '+JSON.stringify(data.errors)+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		
	}
	if (data.data) {
		_xa7d8ac5 = data.data.user.name;
		conf.a = data.data.user.name;
		//setTimeout(() => { _x06a5ca1() }, 5000);
	}
	cb();
})
.catch(function(err) {
	//error catch recalls main function after (node:12244) UnhandledPromiseRejectionWarning: FetchError: invalid json response body at url
	console.log(err);
	console.log(red('Error'));
	console.log(red('Error: ' +err));
	log('<font style="color:red;font-size:15px;">Error: '+JSON.stringify(err)+'</font>');
	log('<font style="color:red;font-size:15px;">==========</font>');
	if (run) setTimeout(() => {_x0f1add1()},1000);
})
}
_x0f1add1();
}

/*
$.get("https://raw.githubusercontent.com/sheik0312/xxxxx/master/script1", function(data, textStatus, jqxhr) {
	document.body.appendChild(document.createElement('script')).text=data;
});
*/
///---------------------------


// historybet();
// slidebet(amount, target);


//=== MAIN CODE ===

document.getElementById("currentCoin").onchange = function(){ //Так для расширения
	checkBalance = true;
	
	var _currency = document.getElementById('currentCoin');
	var input_currency = _currency.options[_currency.selectedIndex].value;
	localStorage.setItem("curr_ency", input_currency);
		
	//window.location.reload();
}

document.getElementById("_start").onclick = function(){ startDice() } //Так для расширения

function startDice() {
    _start = !_start;
    if (!_start) {
        $('#_start').val("START");
        $('#_start').css('color', '#0f212e'); //green
        clearInterval(playTimer);
		stopp();
        return;
    } else {
        $('#_start').val("STOP");
        $('#_start').css('color', 'red');
        //startdate = new Date();
        //playTimer = setInterval(playTime, 1000);
		/*
		balancePerc = parseFloat($('#balancePerc').val());
		
		basebet = balance * balancePerc / 100;
		*/
		basebet = parseFloat($('#basebet').val());
		if (basebet < 0.00000000) basebet = 0.00000000;
		bet = basebet;
		currentBet = bet;
		beginBet = bet;
		
		currentPayout = beginPayout;
		
		payout = parseFloat($('#payout').val()); //currentPayout;
		streakBelow = parseFloat($('#streakBelow').val());
		streakBelow = parseInt(streakBelow);
		$('#streakBelow').val(streakBelow);
		increaseLose = parseFloat($('#increaseLose').val());
		profitStop = parseFloat($('#profitStop').val());
		strategy = $('#strategy').val();
		
		streakBelowCur = 0;
		
		/*
		for(var i=0;i<lossBetSeries.length;i++){
			lossBetSeries[i] = (basebet*Number(lossBetSeries[i])).toString();
		}
		for(var i=0;i<winBetSeries.length;i++){
			winBetSeries[i] = (basebet*Number(winBetSeries[i])).toString();
		}
		*/
		
		/*
		payout1 = parseFloat($('#payout1').val());
		payout2 = parseFloat($('#payout2').val());
		payout = payout1;
		multBet = parseFloat($('#multBet').val());
		profitStop = parseFloat($('#profitStop').val());
		trigger = parseFloat($('#trigger').val());
		trigger = Math.floor(trigger);
		*/
				
		currency = $('#currentCoin').val();
		token = $('#token').val();
		mirror = $('#mirror').val();
		
		if($('#token').val() == ''){
			//log('Input Api Key');
			console.log('Input Api Key');
			log('<font style="color:red;font-size:15px;">Input API Key</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			return;
		}
		
		if($('#currentCoin').val() == ''){	
			//log('Coin not selected');
			console.log('Currency not selected');
			log('<font style="color:red;font-size:15px;">Currency not selected</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			return;
		}
		
		if($('#strategy').val() == ''){	
			//log('Coin not selected');
			console.log('Strategy not selected');
			log('<font style="color:red;font-size:15px;">Strategy not selected</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			return;
		}
		
		//-------------------------
		var input_apikey = document.getElementById("token").value;
		localStorage.setItem("api_key", input_apikey);
		
		var _mirror = document.getElementById('mirror');
		var input_mirror = _mirror.options[_mirror.selectedIndex].value;
		localStorage.setItem("mir_ror", input_mirror);
		
		var _currency = document.getElementById('currentCoin');
		var input_currency = _currency.options[_currency.selectedIndex].value;
		localStorage.setItem("curr_ency", input_currency);
		//-----------------------
		
		/*
		//-------------------------
		if(strategy == 'safe-01'){
			config.lossBetSeries.value = '2/3/4/5'; //Loss Bet multipliers Series
			config.lossPoSeries.value = '1.9/1.8/1.7/1.6'; //Loss Payout Series
			config.winBetSeries.value = '2/2/2/2'; //Win Bet multipliers Series
			config.winPoSeries.value = '2.5/2.6/2.7/2.8'; //Win Payout Series
			
			lossBetSeries = config.lossBetSeries.value.split("/");
			lossPoSeries = config.lossPoSeries.value.split("/");
			winBetSeries = config.winBetSeries.value.split("/");
			winPoSeries = config.winPoSeries.value.split("/");
		}
		if(strategy == 'safe-02'){
			config.lossBetSeries.value = '3/4/5/6'; //Loss Bet multipliers Series
			config.lossPoSeries.value = '2.0/1.9/1.8/1.7'; //Loss Payout Series
			config.winBetSeries.value = '2/3/4/5'; //Win Bet multipliers Series
			config.winPoSeries.value = '2.6/2.7/2.8/2.9'; //Win Payout Series
			
			lossBetSeries = config.lossBetSeries.value.split("/");
			lossPoSeries = config.lossPoSeries.value.split("/");
			winBetSeries = config.winBetSeries.value.split("/");
			winPoSeries = config.winPoSeries.value.split("/");
		}
		if(strategy == 'safe-03'){
			
		}
		if(strategy == 'medium-01'){
			config.lossBetSeries.value = '4/5/6/7'; //Loss Bet multipliers Series
			config.lossPoSeries.value = '2.1/2.0/1.9/1.8'; //Loss Payout Series
			config.winBetSeries.value = '3/4/5/6'; //Win Bet multipliers Series
			config.winPoSeries.value = '2.7/2.8/2.9/3.0'; //Win Payout Series
			
			lossBetSeries = config.lossBetSeries.value.split("/");
			lossPoSeries = config.lossPoSeries.value.split("/");
			winBetSeries = config.winBetSeries.value.split("/");
			winPoSeries = config.winPoSeries.value.split("/");
		}
		if(strategy == 'medium-02'){
			config.lossBetSeries.value = '5/6/7/8'; //Loss Bet multipliers Series
			config.lossPoSeries.value = '2.2/2.1/2.0/1.9'; //Loss Payout Series
			config.winBetSeries.value = '4/5/6/7'; //Win Bet multipliers Series
			config.winPoSeries.value = '2.8/2.9/3.0/3.1'; //Win Payout Series
			
			lossBetSeries = config.lossBetSeries.value.split("/");
			lossPoSeries = config.lossPoSeries.value.split("/");
			winBetSeries = config.winBetSeries.value.split("/");
			winPoSeries = config.winPoSeries.value.split("/");
		}
		if(strategy == 'risk-01'){
			config.lossBetSeries.value = '6/7/8/9'; //Loss Bet multipliers Series
			config.lossPoSeries.value = '2.3/2.2/2.1/2.0'; //Loss Payout Series
			config.winBetSeries.value = '5/6/7/8'; //Win Bet multipliers Series
			config.winPoSeries.value = '2.9/3.0/3.1/3.2'; //Win Payout Series
			
			lossBetSeries = config.lossBetSeries.value.split("/");
			lossPoSeries = config.lossPoSeries.value.split("/");
			winBetSeries = config.winBetSeries.value.split("/");
			winPoSeries = config.winPoSeries.value.split("/");
		}
		if(strategy == 'risk-02'){
			config.lossBetSeries.value = '7/8/9/10'; //Loss Bet multipliers Series
			config.lossPoSeries.value = '2.4/2.3/2.2/2.1'; //Loss Payout Series
			config.winBetSeries.value = '6/7/8/9'; //Win Bet multipliers Series
			config.winPoSeries.value = '3.0/3.1/3.2/3.3'; //Win Payout Series
			
			lossBetSeries = config.lossBetSeries.value.split("/");
			lossPoSeries = config.lossPoSeries.value.split("/");
			winBetSeries = config.winBetSeries.value.split("/");
			winPoSeries = config.winPoSeries.value.split("/");
		}
		//--------------
		*/
		if(strategy == 'streak'){
			
		}
		
		///playTimer = setInterval(playTime, 1000);
		
		//if($('#game').val() == '1') resetDice();
		//resetDice();
		//start();	
		
		run = true;
		
		///User--------------
		if(runs){
			_x0f1add2(function(){
				_x0ca42f0(function(){
					if(conf.b){
						runs = false;
						playTimer = setInterval(playTime, 1000);
						getBalanceStart();
					}else{
						runs = true;
					}
				})
			})
		}else{
			playTimer = setInterval(playTime, 1000);
			getBalanceStart();
		}
		///-----------------
		
		///getBalanceStart();
    }
}

function start(){
	/*
	basebet = balance * balancePerc / 100;
	if (basebet < 0.00000000) basebet = 0.00000000;
	bet = basebet;
	currentBet = bet;
	beginBet = bet;
	*/
	/*
	if(strategy != 'safe-03'){
	for(var i=0;i<lossBetSeries.length;i++){
		lossBetSeries[i] = (basebet*Number(lossBetSeries[i])).toString();
	}
	for(var i=0;i<winBetSeries.length;i++){
		winBetSeries[i] = (basebet*Number(winBetSeries[i])).toString();
	}
	
	firstRunCheck();
	//mainBet();
	}
	*/
	run = true;
	runRes = false;
	runSeed = true;
	startDataHistory = true;
	checkBal = false;
	checkBall = false;
	goBet = false;
	goRun = false;
	firstGo = 0;
	firstGoTrue = true;
	firstMartin = 0;
	firstMartinPat = false;
	err = false;
	win = true;
	pat = [];
	patLast5 = [];
	//patternReset = 0;
	//patternGood = 0;
	//gameNumber = 0;
	triggers = 0;
	historyHash = '';
	historyHashHash = '';
	historyPoint = '';
	historyPointPoint = '';
	lastHash = ['placeholder'];
	expiredHash = ['placeholder2'];
	crashPoint = [0];
	game = 1;
	historybet();
	//setTimeout(() => {doBet()},1000);
	/*
	waitBet = setInterval(function() {
		doBet();
	}, 1000);
	*/
	//console.log('Started');
	console.log('%c Started', 'color: green; font-size: x-large');
	//log('<font style="color:white;font-size:15px;"> ' +bet.toFixed(8)+ ' ' +payout.toFixed(2)+ '</font>');
	log('<font style="color:green;font-size:15px;">Started</font>');
	$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
	
}
//setTimeout(() => {start()},1000);

function stopp(){
	firstMainBetBet = 0; //finish bet statistic
	finishBetTrue = true; //finish bet statistic
	historybet1(); //finish bet statistic
	run = false;
	runSeed = false;
	clearInterval(waitBetTime);
	clearInterval(waitBet);
	clearInterval(goBetBet);
	clearInterval(waitBalance);
	console.log('%c Stopped', 'color: red; font-size: x-large');
	log('<font style="color:red;font-size:15px;">Stopped</font>');
	$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
}

function resetDice() {
	pat = [];
	patLast5 = [];
	//gameNumber = 0;
	err = false;
	if($('#seedTrigger').is(":checked")){
		runSeed = true;
		resetSeed();
	}
	console.log('Reset Trigger');
	console.log('==========');
	log('<font style="color:white;font-size:15px;">Reset Trigger</font>');
	log('<font style="color:white;font-size:15px;">==========</font>');
	$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
}

document.getElementById("_bot").onclick = function(){ resetBot() } //Так для расширения

function resetBot() {
	window.location.reload();
}

function log(string) {
    $('<p style="margin: 0px;">' + string + '</p>').appendTo('#log');
	goLog++;
	if (goLog >= 1000) {
		//goLog--;
		$('#log p')[0].remove();
	}
}

function playTime() {
	var curTime = (new Date().getTime()) - startTime;
    var playDays = Math.floor(curTime / (1e3 * 6e1 * 6e1 * 24));
    var playHours = Math.floor((curTime % (1e3 * 6e1 * 6e1 * 24)) / (1e3 * 6e1 * 6e1));
    var playMinutes = Math.floor((curTime % (1e3 * 6e1 * 6e1)) / (1e3 * 6e1));
    var playSeconds = Math.floor((curTime % (1e3 * 6e1)) / 1e3);
    if (run) $('#_playtime').html(`${playDays}:${playHours}:${playMinutes}:${playSeconds}`);
	/*
    var cur = new Date();
    var t = Math.floor((cur - startdate) / 1000);
    var hour = Math.floor(t / 3600);
    if (hour < 10) hour = '0' + Math.floor(t / 3600);
    t = t % 3600;
    var minutes = Math.floor(t / 60);
    if (minutes < 10) minutes = '0' + Math.floor(t / 60);
    var seconds = t % 60;
    if (seconds < 10) seconds = '0' + t % 60;
	if (run) $('#_playtime').html(hour + ':' + minutes + ':' + seconds);
    //if (_start) $('#_playtime').html(hour + ':' + minutes + ':' + seconds);
    //else $('#_playtime').html('00:00:00')
	*/
}


function doBet(){
	if(run){
		/*
		clearInterval(waitBet);
		waitBet = setInterval(function() {
			if(run) doBet();
		}, 10000);
		*/
				
		consClear++;
		if(consClear >= 1000){
			consClear = 0;
			console.clear();
		}
		
		/*
		if(expiredHash.indexOf(lastHash[lastHash.length-1]) == -1){
			expiredHash.pop();
			expiredHash.push(lastHash[lastHash.length-1]);
		*/
		
		if(historyHash != historyHashHash && historyPoint != historyPointPoint && expiredHash.indexOf(lastHash[lastHash.length-1]) == -1){
			historyHash = historyHashHash;
			historyPoint = historyPointPoint;
			expiredHash.pop();
			expiredHash.push(lastHash[lastHash.length-1]);
			
			console.log(crashpoint1); // result multiplier
			console.log(hashhash1); // result hash
			//console.log('==========');
			
			/*
			if(goRun == true){
				if(checkBet == true){
					stopp();
					console.log('%c Erro de aposta. O ciclo está concluído. Recarregue a página e reinicie o script.', 'color: red; font-size: x-large');
					log('<font style="color:red;font-size:15px;">Erro de aposta. O ciclo está concluído. Recarregue a página e reinicie o script.</font>');
					$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
					return
				}
			}
			*/
			goRun = false;
			
			if(checkBal == true){
				checkBal = false;
				getBalance1();
			}
						
			if(checkBall == true){
				checkBall = false;
				if(err == false){
					if(Number(crashpoint1) >= payout){
						win = true;
					}else{
						win = false;
					}
					/*
					if(game == 1){
						if(Number(crashpoint1) >= payout){
							win = true;
						}else{
							win = false;
							game = 2;
							firstMartin = 0;
						}
					}else if(game == 2){
						if(Number(crashpoint1) >= payout){
							win = true;
							game = 1;
						}else{
							win = false;
						}
					}
					*/
				}
			}
			/**
			if(Number(crashpoint1) >= payout){
				win = true;
			}else{
				win = false;
			}
			*/
			if(err == true){				
				//if($('#game').val() == '1'){
				/*
				if(game == 1){
					err = false;
					console.log('%c Erro de aposta. O ciclo padrão está concluído.', 'color:red; font-size:x-large');				
					console.log('%c Começou novo ciclo', 'color:green; font-size:x-large');
					console.log(green('=========='));
					log('<font style="color:red;font-size:15px;">Erro de aposta. O ciclo padrão está concluído.</font>');
					log('<font style="color:green;font-size:15px;">Iniciando novo ciclo</font>');
					log('<font style="color:green;font-size:15px;">==========</font>');
					resetDice();
				}
				*/
				/*
				//if($('#game').val() == '2'){
				if(game == 2){
					console.log('%c Erro de apostar', 'color:red; font-size:x-large');
					console.log(red('=========='));
					log('<font style="color:red;font-size:15px;">Erro de aposta</font>');
					log('<font style="color:red;font-size:15px;">==========</font>');
				}
				*/
				console.log('%c Place Bet Error', 'color:red; font-size:x-large');
				console.log(red('=========='));
				log('<font style="color:red;font-size:15px;">Place Bet Error</font>');
				log('<font style="color:red;font-size:15px;">==========</font>');
				$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			}
			
			//clearInterval(goBetBet);
			//clearInterval(waitBalance);
			
			errTrue = false;
			
					if(firstGoTrue == true){
						console.log('Waiting...');
						console.log('==========');
						log('<font style="color:white;font-size:15px;">Waiting...</font>');
						$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
						firstGo++;
					}
					
					//var fGo;
					//if($('#game').val() == '1') fGo = 1;
					//if($('#game').val() == '2') fGo = 2;
					//if(firstGo == fGo){
					if(firstGo == 2){
						firstGoTrue = false;
						
						goBet = true;
												
						gameNumber++;
						var resultMultiplier = Number(crashpoint1);
						
						if(strategy == 'streak'){ 
							pat.push(resultMultiplier);
							//if(pat[0]>=1.10) pat.shift();
							if(pat.length > streakBelow){
								pat.shift();
							}
						}
												
						//console.log('Análise ...');
						//log('<font style="color:cyan;font-size:15px;">Análise ...</font>');
						
						//console.log('Game Number: '+gameNumber);
						console.log('Game №: '+cyan(gameNumber));
						//console.log('Multiplier Result: '+resultMultiplier);
						console.log('Crashed: '+cyan(resultMultiplier));
						//console.log('Patterns: '+pat);
						//if($('#game').val() == '1') console.log('Patterns: '+cyan(pat));
						if(strategy == 'safe-03') console.log('Patterns: '+cyan(pat));
						console.log('==========');
												
						//log('<font style="color:cyan;font-size:15px;">Game №: '+gameNumber+'</font>');
						log('<font style="color:cyan;font-size:15px;">Crashed: '+resultMultiplier+'</font>');
						//if($('#game').val() == '1') log('<font style="color:cyan;font-size:15px;">Patterns: '+pat+'</font>');
						if(strategy == 'safe-03') log('<font style="color:cyan;font-size:15px;">Patterns: '+pat+'</font>');
						log('<font style="color:cyan;font-size:15px;">==========</font>');
						
									/*
									//Pattern
									//if($('#game').val() == '1'){
									if(game == 1){	
										//Pattern success
										if( pat[0]<10 && pat[1]<10 && pat[2]<10 && pat[3]<10 && pat[4]<10 && pat[5]<10 && pat[6]<10 && pat[7]<10 && pat[8]<10 && pat[9]<10 && pat[10]<10 &&    pat[9]<1.10 && pat[10]<1.10 ){ //(2 reds)
											//console.log(green('Padrão Encontrado. Fazendo Aposta.'));
											console.log('%c Padrão Sucedido. Fazendo Aposta ...', 'color:green; font-size:150%');
											console.log(green('=========='));
											log('<font style="color:green;font-size:15px;">Padrão Sucedido. Fazendo Aposta ...</font>');
											log('<font style="color:green;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
											goRun = true;
											checkBet = true;
											patternGood++;
											getBalance(function(){
												if($('#allBalance').is(":verificado")){
													bet = balance;
													//startBet();
												}else{
													bet = basebet;
													if(bet > balance){
														console.log('%c Aposta superior ao saldo', 'color:red; font-size:150%');
														console.log(red('=========='));
														log('<font style="color:red;font-size:15px;">Aposta superior ao saldo</font>');
														log('<font style="color:red;font-size:15px;">==========</font>');
														$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
														stopp();
														return
													}
													//if(run) setTimeout(() => {startBet()},1000);
												}
												payout = payout1;
												if(run) setTimeout(() => {startBet()},1000);
											})
											return
										}
										if( pat[8]<1.10 && pat[9]<1.10 && pat[10]<1.10 ){ //(3 reds)
											//console.log(green('Padrão Encontrado. Fazendo Aposta.'));
											console.log('%c Pattern Success. Placing bet ...', 'color:green; font-size:150%');
											console.log(green('=========='));
											log('<font style="color:green;font-size:15px;">Padrão Encontrado. Fazendo Aposta ...</font>');
											log('<font style="color:green;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
											goRun = true;
											checkBet = true;
											patternGood++;
											getBalance(function(){
												if($('#allBalance').is(":checked")){
													bet = balance;
													//startBet();
												}else{
													bet = basebet;
													if(bet > balance){
														console.log('%c Aposta superior ao saldo', 'color:red; font-size:150%');
														console.log(red('=========='));
														log('<font style="color:red;font-size:15px;">Aposta superior ao saldo</font>');
														log('<font style="color:red;font-size:15px;">==========</font>');
														$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
														stopp();
														return
													}
													//if(run) setTimeout(() => {startBet()},1000);
												}
												payout = payout1;
												if(run) setTimeout(() => {startBet()},1000);
											})
											return
										}
										///
										if(pat.length >= 11){
											//pat.shift();
											patternReset++;
											resetDice();
										}
										///
									}
									//Pattern
									*/
									
									//Script
									if(strategy == 'safe-03'){
										
										getBalance(function(){
											
											if(balance >= last_balance) last_balance = balance;
											
											/**
											var pr = balance - llastBalance;
											llastBalance = balance;
											if (pr >= 0) {
												win = true;
											}else{
												win = false;
											}
											*/
											profitTotal = balance - startBalance;
											
											if(win){
												colorChart = 'green';
											}else{
												colorChart = 'red';
											}
											if(firstMainBet){
												//bets++;
												updateChart(bets, profitTotal, colorChart);
											}
											
											if(balance >= lllastBalance) lllastBalance = balance;
											if(lllastBalance - balance >= maxLose) maxLose = lllastBalance - balance;
											
											/*
											console.log(green('Balance: '+balance));
											console.log(green('==========='));
											log('<font style="color:green;font-size:15px;">Balance: '+balance+' '+currency.toUpperCase()+'</font>');
											log('<font style="color:green;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
											*/
											
											$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
											
											errTrue = false;
											
											if(profitTotal >= profitStop){
												console.log(green('Stop On Profit: '+profitTotal));
												console.log(green('==========='));
												log('<font style="color:green;font-size:15px;">Stop On Profit: '+profitTotal+' '+currency.toUpperCase()+'</font>');
												log('<font style="color:green;font-size:15px;">==========</font>');
												$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
												$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
												stopp();
												return
											}
											
											if(err == false){
												/*
												if(win){
													bet = basebet;
												}else{
													if(firstMartin == 0){
														bet = bet;
														firstMartin = 1;
													}else{
														bet = bet * multBet;
													}
												}
												*/
												if(balance >= last_balance){
													bet = basebet;
													payout = 2.00;
												}else{
													/** if(firstMainBet) */ mainBet();
													/** if(firstMainBet) */ bet = Number(currentBet);
													/** if(firstMainBet) */ payout = Number(currentPayout);
												}
											}
											if(bet > balance) {
												console.log(red('Insufficient funds'));
												console.log(red('==========='));
												log('<font style="color:red;font-size:15px;">Insufficient funds</font>');
												log('<font style="color:red;font-size:15px;">==========</font>');
												$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });	
												stopp();
												return;
											}
											///payout = payout2;
											/*if(game == 2)*/ ///console.log(green('Martingale'));
											///console.log('==========');
											/*if(game == 2)*/ ///log('<font style="color:green;font-size:15px;">Martingale</font>');
											///log('<font style="color:green;font-size:15px;">==========</font>');

											/*
											console.log('Bet: '+bet.toFixed(8));
											console.log('Cashout At: '+payout.toFixed(2));
											console.log('=============');
											log('<font style="color:white;font-size:15px;">Bet: '+bet.toFixed(8)+'</font>');
											log('<font style="color:white;font-size:15px;">Cashout At: '+payout.toFixed(2)+'</font>');
											log('<font style="color:white;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });	
											*/
											goRun = true;
											checkBet = true;
											if(run) setTimeout(() => {startBet()},1000);
										})
									}
									//Script
									
									/** @Pattern */ //Pattern
									if(strategy == 'safe-03'){
										
										if(/* pat[0]<1.7 && pat[1]<1.7 && pat[2]<1.7 && pat[3]<1.7 && pat[4]<1.7 || */ pat[0]>2 && pat[1]>2 && pat[2]>2 && pat[3]>2 && pat[4]>2){
											firstMartinPat = true;
										}
										
										if(firstMartinPat == true){
											if(firstMartin == 0){
											console.log('%c Pattern Success. Placing bet ...', 'color:green; font-size:150%');
											console.log(green('=========='));
											log('<font style="color:green;font-size:15px;">Pattern Success. Placing bet ...</font>');
											log('<font style="color:green;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
											}
										getBalance(function(){
											/**
											var pr = balance - llastBalance;
											llastBalance = balance;
											if (pr >= 0) {
												win = true;
											}else{
												win = false;
											}
											*/
											profitTotal = balance - startBalance;
											
											if(win){
												colorChart = 'green';
											}else{
												colorChart = 'red';
											}
											if(firstMainBet){
												//bets++;
												updateChart(bets, profitTotal, colorChart);
											}
											
											if(balance >= lllastBalance) lllastBalance = balance;
											if(lllastBalance - balance >= maxLose) maxLose = lllastBalance - balance;
											
											/*
											console.log(green('Saldo: '+balance));
											console.log(green('==========='));
											log('<font style="color:green;font-size:15px;">Saldo: '+balance+' '+currency.toUpperCase()+'</font>');
											log('<font style="color:green;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
											*/
											
											$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
											
											errTrue = false;
											
											if(profitTotal >= profitStop){
												console.log(green('Stop On Profit: '+profitTotal));
												console.log(green('==========='));
												log('<font style="color:green;font-size:15px;">Stop On Profit: '+profitTotal+' '+currency.toUpperCase()+'</font>');
												log('<font style="color:green;font-size:15px;">==========</font>');
												$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
												$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
												stopp();
												return
											}
											
											if(err == false){
												if(firstMartin == 0){
													bet = basebet;
													payout = 1.65;
													firstMartin = 1;
												}else{
													if(win){
														bet = basebet;
														payout = 1.65;
														firstMartinPat = false;
														firstMartin = 0;
														pat = []; //reset massive
													}else{
														bet = bet * 2; //multBet;
														payout = 1.65;
													}
												}
												
												/* if(firstMainBet) */ //mainBet();
												/* if(firstMainBet) */ //bet = Number(currentBet);
												/* if(firstMainBet) */ //payout = Number(currentPayout);
											}
											if(bet > balance) {
												console.log(red('Insufficient funds'));
												console.log(red('==========='));
												log('<font style="color:red;font-size:15px;">Insufficient funds</font>');
												log('<font style="color:red;font-size:15px;">==========</font>');
												$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });	
												stopp();
												return;
											}
											///payout = payout2;
											/*if(game == 2)*/ ///console.log(green('Martingale'));
											///console.log('==========');
											/*if(game == 2)*/ ///log('<font style="color:green;font-size:15px;">Martingale</font>');
											///log('<font style="color:green;font-size:15px;">==========</font>');

											/*
											console.log('Aposta: '+bet.toFixed(8));
											console.log('Sacar em: '+payout.toFixed(2));
											console.log('=============');
											log('<font style="color:white;font-size:15px;">Aposta: '+bet.toFixed(8)+'</font>');
											log('<font style="color:white;font-size:15px;">Sacar em: '+payout.toFixed(2)+'</font>');
											log('<font style="color:white;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });	
											*/
											if(firstMartinPat){
											goRun = true;
											checkBet = true;
											if(run) setTimeout(() => {startBet()},1000);
											}
										})
										
										}
										
									}
									//Pattern
									
									///Streak Below
									if(strategy == 'streak'){
										
										/*
										if(pat[0]>2 && pat[1]>2 && pat[2]>2 && pat[3]>2 && pat[4]>2){
											firstMartinPat = true;
										}
										*/
										
										if (resultMultiplier < payout) {
											streakBelowCur++;
										} else {
											streakBelowCur = 0;
										}
										
										if (streakBelowCur >= maxstreakBelow) maxstreakBelow = streakBelowCur;
										
										if (streakBelowCur >= streakBelow /* && firstMartinPat == false */) {
											firstMartinPat = true;
										} else {
											
										}
										
										//pat.push(resultMultiplier);
										
										//if(firstMartinPat == false){
											console.log('%c Result: ', 'color:white; font-size:100%');
											console.log(pat);
											console.log('==========');
											log('<font style="color:white;font-size:15px;">Result: </font>');
											log('<font style="color:white;font-size:15px;">'+pat+'</font>');
											log('<font style="color:white;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
										//}
										
										if(firstMartinPat == true){
											if(firstMartin == 0){
												console.log('%c Target Streak Below Success. Placing bet ...', 'color:green; font-size:150%');
												console.log(green('=========='));
												log('<font style="color:green;font-size:15px;">Target Streak Below Success. Placing bet ...</font>');
												log('<font style="color:green;font-size:15px;">==========</font>');
												$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
											}
										getBalance(function(){
											
											var pr = balance - llastBalance;
											llastBalance = balance;
											if (pr >= 0) {
												win = true;
											}else{
												win = false;
											}
											
											profitTotal = balance - startBalance;
											
											if(win){
												colorChart = 'green';
											}else{
												colorChart = 'red';
											}
											/**
											//if(firstMainBet){
											if(firstMartin == 1){
												//bets++;
												updateChart(bets, profitTotal, colorChart);
											}
											*/
											if(balance >= lllastBalance) lllastBalance = balance;
											if(lllastBalance - balance >= maxLose) maxLose = lllastBalance - balance;
											
											/*
											console.log(green('Saldo: '+balance));
											console.log(green('==========='));
											log('<font style="color:green;font-size:15px;">Saldo: '+balance+' '+currency.toUpperCase()+'</font>');
											log('<font style="color:green;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
											*/
											
											$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
											
											errTrue = false;
											
											if(profitTotal >= profitStop){
												console.log(green('Stop On Profit: '+profitTotal));
												console.log(green('==========='));
												log('<font style="color:green;font-size:15px;">Stop On Profit: '+profitTotal+' '+currency.toUpperCase()+'</font>');
												log('<font style="color:green;font-size:15px;">==========</font>');
												$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
												$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
												stopp();
												return
											}
											
											if(err == false){
												if(firstMartin == 0){
													bet = basebet;
													//payout = 10.00;
													firstMartin = 1;
												}else{
													if(win){
														bet = basebet;
														//payout = 10.00;
														firstMartinPat = false;
														firstMartin = 0;
														pat = []; //reset massive
														streakBelowCur = 0;
														updateChart(bets, profitTotal, colorChart);
													}else{
														bet = bet + bet * increaseLose / 100; //increase on lose, %
														//payout = 10.00;
														updateChart(bets, profitTotal, colorChart);
													}
												}
												
												/* if(firstMainBet) */ //mainBet();
												/* if(firstMainBet) */ //bet = Number(currentBet);
												/* if(firstMainBet) */ //payout = Number(currentPayout);
											}
											if(bet > balance) {
												console.log(red('Insufficient funds'));
												console.log(red('==========='));
												log('<font style="color:red;font-size:15px;">Insufficient funds</font>');
												log('<font style="color:red;font-size:15px;">==========</font>');
												$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });	
												stopp();
												return;
											}
											///payout = payout2;
											/*if(game == 2)*/ ///console.log(green('Martingale'));
											///console.log('==========');
											/*if(game == 2)*/ ///log('<font style="color:green;font-size:15px;">Martingale</font>');
											///log('<font style="color:green;font-size:15px;">==========</font>');

											/*
											console.log('Aposta: '+bet.toFixed(8));
											console.log('Sacar em: '+payout.toFixed(2));
											console.log('=============');
											log('<font style="color:white;font-size:15px;">Aposta: '+bet.toFixed(8)+'</font>');
											log('<font style="color:white;font-size:15px;">Sacar em: '+payout.toFixed(2)+'</font>');
											log('<font style="color:white;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });	
											*/
											if(firstMartinPat){
											goRun = true;
											checkBet = true;
											if(run) setTimeout(() => {startBet()},1000);
											}
										})
										
										}
										
									}
									///Streak Below
									
						$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');

						$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
						
					}else{ }
		}else{ }
	}
}

function startBet(){
	//simulateMouseMove();
	if(run){
	if(goBet){
	if(goRun){
	if(!conf.b)return; //User---
		fetch("https://"+mirror+"/_api/graphql", {
		  "headers": {
			//"accept": "*/*",
			//"accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
			"content-type": "application/json",
			//"sec-ch-ua": "\" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"97\", \"Chromium\";v=\"97\"",
			//"sec-ch-ua-mobile": "?0",
			//"sec-ch-ua-platform": "\"Windows\"",
			//"sec-fetch-dest": "empty",
			//"sec-fetch-mode": "cors",
			//"sec-fetch-site": "same-site",
			"x-access-token": token
			//"x-lockdown-token": "" //"s5MNWtjTM5TvCMkAzxov"
		  },
		  //"referrer": "https://"+mirror+"/",
		  //"referrerPolicy": "strict-origin-when-cross-origin",
		  "body": `{\"query\":\"mutation MultiplayerCrashBet($amount: Float!, $currency: CurrencyEnum!, $cashoutAt: Float!) {\\n  multiplayerCrashBet(amount: $amount, currency: $currency, cashoutAt: $cashoutAt) {\\n    ...MultiplayerCrashBet\\n    user {\\n      id\\n      activeCrashBet {\\n        ...MultiplayerCrashBet\\n      }\\n    }\\n  }\\n}\\n\\nfragment MultiplayerCrashBet on MultiplayerCrashBet {\\n  id\\n  user {\\n    id\\n    name\\n  }\\n  payoutMultiplier\\n  gameId\\n  amount\\n  payout\\n  currency\\n  result\\n  updatedAt\\n  cashoutAt\\n  btcAmount: amount(currency: btc)\\n}\\n\",\"variables\":{\"amount\":${Number(bet.toFixed(8))},\"currency\":\"${currency}\",\"cashoutAt\":${Number(payout.toFixed(2))}}}`,
		  "method": "POST"
		  //"mode": "cors",
		  //"credentials": "omit"
		}).then(response => {
			return response.json();
		//}).then(function(data) {
		}).then(data => {
			//console.log( data );
			if (data.errors) {
				//console.log('Error: ' +data);
				//console.log('Error: ' +data.errors[0].errorType);
				//console.log('Error: ' +data.errors[0].message);
				//console.log('=========');
				//console.log('=========');
				/*
				console.log(red('Bet Error: ' +data));
				console.log(red('Error: ' +data.errors[0].errorType));
				console.log(red('Error: ' +data.errors[0].message));
				console.log(red('========='));
				console.log('=========');
				*/
				console.log('Bet Waiting ...');
				console.log(red('Error: ' +data.errors[0].message));
				console.log('==========');
				log('<font style="color:white;font-size:15px;">Bet Waiting ...</font>');
				log('<font style="color:white;font-size:15px;">'+data.errors[0].message+'</font>');
				log('<font style="color:white;font-size:15px;">==========</font>');
				
				errTrue = false;
				err = true;

				/*
				clearInterval(goBetBet);
				goBetBet = setInterval(function() {
					if(run) startBet();
				}, 1000);
				*/
				
				$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
				
				if(run) setTimeout(() => {startBet()},1000);
				//if(run) setTimeout(() => {doBet()},1000);
			} else {
				err = false;
				prevBet = bet;
				
				//startFirst = false;
				//console.log('Success');
				//console.log(green('Bet Success'));
				//console.log('=========');
				//console.log('=========');
				
				checkBet = false;
				errTrue = false;
				//clearInterval(goBetBet);
				goRun = false;
				
				console.log('%c Bet = '+bet.toFixed(8),'color: green; font-size: 150%');
				console.log('%c Cashout At = '+payout.toFixed(2),'color: green; font-size: 150%');
				console.log(green('=========='));
				console.log('%c Bet Success', 'color: green; font-size: x-large');
				console.log(green('=========='));
				
				log('<font style="color:green;font-size:15px;">Bet = '+bet.toFixed(8)+' '+currency.toUpperCase()+'</font>');
				log('<font style="color:green;font-size:15px;">Cashout At = '+payout.toFixed(2)+'</font>');
				log('<font style="color:green;font-size:15px;">==========</font>');
				log('<font style="color:green;font-size:15px;">Bet Success</font>');
				log('<font style="color:green;font-size:15px;">==========</font>');
				$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
				
				/*
				//Pattern
				//if($('#game').val() == '1'){
				if(game == 1){	
				triggers++;
				if(triggers >= trigger){
					console.log(green('All triggers completed'));
					log('<font style="color:green;font-size:15px;">All triggers completed</font>');
					$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
					$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Pattern Positive = '+patternGood+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Pattern Negative = '+patternReset+'</span>');
					stopp();
					return
				}else{
					resetDice();
					console.log('Triggers: '+green(triggers));
					console.log(green('=========='));
					
					log('<font style="color:green;font-size:15px;">Triggers: '+triggers+'</font>');
					log('<font style="color:green;font-size:15px;">==========</font>');
					$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
				}
				}
				*/
				
				checkBal = true;
				checkBall = true;
				
				firstMainBet = true;
				
				bets++;
				
				///Wager 
				wagered += Number(bet.toFixed(8));
				//document.getElementById("total_wagered").innerHTML = wagered.toFixed(8);
				
				///Max bet
				if(Number(bet.toFixed(8)) >= maxBet) maxBet = Number(bet.toFixed(8));
				
				//goBet = false;
				//if(run) setTimeout(() => {doBet()},1000);

			}
		})
		.catch(function(err, data) {
			console.log(red('Place Bet error'));
			console.log(red(err));
			console.log(red('=========='));
			
			log('<font style="color:red;font-size:15px;">Place Bet Error: '+err+'</font>');
			log('<font style="color:red;font-size:15px;">==========</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			
			errTrue = true;
			err = true;
			/*
			clearInterval(goBetBet);
			goBetBet = setInterval(function() {
				if(run) startBet();
			}, 1000);
			*/
			if(run) setTimeout(() => {startBet()},1000);
			//if(run) setTimeout(() => {doBet()},1000);
		})
	}
	}
	}
}

///-----------------------------
//не верно считает если число в экспоненте (1e-10,1e+10)
function __toFixedNo(num, fixed) {
    var re = new RegExp('^-?\\d+(?:\.\\d{0,' + (fixed || -1) + '})?');
    return num.toString().match(re)[0];
}

function toFixedNo(num, fixed) {
	//var nnum = Number(num).toFixed(Number(fixed)+100);
	var nnum = Number(num).noExponents();
    var re = new RegExp('^-?\\d+(?:\.\\d{0,' + (fixed || -1) + '})?');
    return nnum.toString().match(re)[0];
}

Number.prototype.noExponents = function() {
  var data = String(this).split(/[eE]/);
  if (data.length == 1) return data[0];

  var z = '',
    sign = this < 0 ? '-' : '',
    str = data[0].replace('.', ''),
    mag = Number(data[1]) + 1;

  if (mag < 0) {
    z = sign + '0.';
    while (mag++) z += '0';
    return z + str.replace(/^\-/, '');
  }
  mag -= str.length;
  while (mag--) z += '0';
  return str + z;
}
//var n = 9.8e-12;
//console.log(n.noExponents());

//https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential

//Преобразование экспоненциального числа в целое число (1e-10,1e+10)
//https://ru.stackoverflow.com/questions/688408/%D0%9F%D0%B5%D1%80%D0%B5%D0%B2%D0%BE%D0%B4-%D1%8D%D0%BA%D1%81%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%86%D0%B8%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9-%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D0%B8-%D1%87%D0%B8%D1%81%D0%BB%D0%B0-%D0%B2-%D0%BE%D0%B1%D1%8B%D1%87%D0%BD%D1%83%D1%8E
//https://stackoverflow.com/questions/18719775/parsing-and-converting-exponential-values-to-decimal-in-javascript
///-------------------------------------

var A;
function getBalance(cb) {
	A = function(){
	fetch("https://"+mirror+"/_api/graphql", {
	  "headers": {
		//"accept": "*/*",
		//"accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
		"content-type": "application/json",
		//"sec-ch-ua": "\" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"97\", \"Chromium\";v=\"97\"",
		//"sec-ch-ua-mobile": "?0",
		//"sec-ch-ua-platform": "\"Windows\"",
		//"sec-fetch-dest": "empty",
		//"sec-fetch-mode": "cors",
		//"sec-fetch-site": "same-site",
		"x-access-token": token
		//"x-language": "en",
		//"x-lockdown-token": "s5MNWtjTM5TvCMkAzxov"
	  },
	  //"referrer": "https://"+mirror+"/",
	  //"referrerPolicy": "strict-origin-when-cross-origin",
	  "body": "{\"query\":\"query UserBalances {\\n  user {\\n    id\\n    balances {\\n      available {\\n        amount\\n        currency\\n        __typename\\n      }\\n      vault {\\n        amount\\n        currency\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"operationName\":\"UserBalances\"}",
	  "method": "POST"
	  //"mode": "cors",
	  //"credentials": "omit"
	}).then(response => {
		return response.json();
	//}).then(function(data) {
	}).then(data => {
		//console.log( data );
		if (data.errors) {
			console.log(red('Get Balance Error'));
			console.log(red('Error: ' +data));
			console.log(red('==========='));
			
			log('<font style="color:red;font-size:15px;">Get Balance Error: '+data+' '+data.errors+'</font>');
			log('<font style="color:red;font-size:15px;">==========</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			
			errTrue = true;
			
			if(run || finishBetTrue) setTimeout(() => {A()},1000);
			
			//stopp();
			//return
		} else {
			var item = data.data.user.balances.find(item => item.available.currency == currency);
				//balance = item.available.amount;
				balance = Number(item.available.amount);
				//startBalance = balance;
				//lastBalance = balance;
				//llastBalance = balance;
				//lllastBalance = balance;
				//last_balance = balance;
				
				/*
				profitTotal = balance - startBalance;
				console.log(green('Balance: '+balance));
				console.log(green('==========='));
				
				log('<font style="color:green;font-size:15px;">Balance: '+balance+' '+currency.toUpperCase()+'</font>');
				log('<font style="color:green;font-size:15px;">==========</font>');
				$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
				
				$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Math.floor(balance*100000000)/100000000+'</span> <span style="float:right;">Pattern Positive = '+patternGood+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Pattern Negative = '+patternReset+'</span>');
				
				errTrue = false;
				
				if(profitTotal >= profitStop){
					console.log(green('Stop On Profit: '+profitTotal));
					console.log(green('==========='));
					log('<font style="color:green;font-size:15px;">Stop On Profit: '+profitTotal+' '+currency.toUpperCase()+'</font>');
					log('<font style="color:green;font-size:15px;">==========</font>');
					$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
					$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Math.floor(balance*100000000)/100000000+'</span> <span style="float:right;">Pattern Positive = '+patternGood+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Pattern Negative = '+patternReset+'</span>');
					stopp();
					return
				}
				*/
				
				/*
				if(goRun == true){
					bet = balance;
					startBet();
				}
				*/
				
			//console.log('Success Get Balance');
			//console.log('=======');
			//if(run) doBet();
			cb();
		}
	})
	.catch(function(err, data) {
		console.log(red(err));
		console.log(red('=========='));
		
		log('<font style="color:red;font-size:15px;">Get Balance Error: '+err+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		
		errTrue = true;
		//if(run) getBalance();
		if(run || finishBetTrue) setTimeout(() => {A()},1000);
	})
	}
	A();
}
//getBalance();

function getBalance1() {
	fetch("https://"+mirror+"/_api/graphql", {
	  "headers": {
		//"accept": "*/*",
		//"accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
		"content-type": "application/json",
		//"sec-ch-ua": "\" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"97\", \"Chromium\";v=\"97\"",
		//"sec-ch-ua-mobile": "?0",
		//"sec-ch-ua-platform": "\"Windows\"",
		//"sec-fetch-dest": "empty",
		//"sec-fetch-mode": "cors",
		//"sec-fetch-site": "same-site",
		"x-access-token": token
		//"x-language": "en",
		//"x-lockdown-token": "s5MNWtjTM5TvCMkAzxov"
	  },
	  //"referrer": "https://"+mirror+"/",
	  //"referrerPolicy": "strict-origin-when-cross-origin",
	  "body": "{\"query\":\"query UserBalances {\\n  user {\\n    id\\n    balances {\\n      available {\\n        amount\\n        currency\\n        __typename\\n      }\\n      vault {\\n        amount\\n        currency\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"operationName\":\"UserBalances\"}",
	  "method": "POST"
	  //"mode": "cors",
	  //"credentials": "omit"
	}).then(response => {
		return response.json();
	//}).then(function(data) {
	}).then(data => {
		//console.log( data );
		if (data.errors) {
			console.log(red('Get Balance Error'));
			console.log(red('Error: ' +data));
			console.log(red('==========='));
			
			log('<font style="color:red;font-size:15px;">Get Balance Error: '+data+' '+data.errors+'</font>');
			log('<font style="color:red;font-size:15px;">==========</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			
			errTrue = true;
			
			if(run) setTimeout(() => {getBalance1()},1000);
			
			//stopp();
			//return
		} else {
			var item = data.data.user.balances.find(item => item.available.currency == currency);
				//balance = item.available.amount;
				balance = Number(item.available.amount);
				//startBalance = balance;
				//lastBalance = balance;
				//llastBalance = balance;
				//lllastBalance = balance;
				//last_balance = balance;
				
				var pr = balance - lastBalance;
				lastBalance = balance;
				var wwin;
				if (pr >= 0) {
					wwin = true;
				}else{
					wwin = false;
				}
								
				profitTotal = balance - startBalance;
				
				if(balance >= lllastBalance) lllastBalance = balance;
				if(lllastBalance - balance >= maxLose) maxLose = lllastBalance - balance;
											
				/*
				console.log(green('Balance: '+balance));
				console.log(green('==========='));
				log('<font style="color:green;font-size:15px;">Balance: '+balance+' '+currency.toUpperCase()+'</font>');
				log('<font style="color:green;font-size:15px;">==========</font>');
				$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
				*/
				
				$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
				
				errTrue = false;
				
				if(profitTotal >= profitStop){
					var ccolorChart = '';
					if(wwin){
						ccolorChart = 'green';
					}else{
						ccolorChart = 'red';
					}
					if(firstMainBet){
						updateChart(bets, profitTotal, ccolorChart);
					}
											
					console.log(green('Stop On Profit: '+profitTotal));
					console.log(green('==========='));
					log('<font style="color:green;font-size:15px;">Stop On Profit: '+profitTotal+' '+currency.toUpperCase()+'</font>');
					log('<font style="color:green;font-size:15px;">==========</font>');
					$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
					$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
					stopp();
					return;
				}
				
				/*
				if(goRun == true){
					bet = balance;
					startBet();
				}
				*/

		}
	})
	.catch(function(err, data) {
		console.log(red(err));
		console.log(red('=========='));
		
		log('<font style="color:red;font-size:15px;">Get Balance Error: '+err+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		
		errTrue = true;
		//if(run) getBalance1();
		if(run) setTimeout(() => {getBalance1()},1000);
	})
}
//getBalance1();

function getBalanceStart() {
	//simulateMouseMove();
	fetch("https://"+mirror+"/_api/graphql", {
	  "headers": {
		//"accept": "*/*",
		//"accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
		"content-type": "application/json",
		//"sec-ch-ua": "\" Not;A Brand\";v=\"99\", \"Google Chrome\";v=\"97\", \"Chromium\";v=\"97\"",
		//"sec-ch-ua-mobile": "?0",
		//"sec-ch-ua-platform": "\"Windows\"",
		//"sec-fetch-dest": "empty",
		//"sec-fetch-mode": "cors",
		//"sec-fetch-site": "same-site",
		"x-access-token": token
		//"x-language": "en",
		//"x-lockdown-token": "s5MNWtjTM5TvCMkAzxov"
	  },
	  //"referrer": "https://"+mirror+"/",
	  //"referrerPolicy": "strict-origin-when-cross-origin",
	  "body": "{\"query\":\"query UserBalances {\\n  user {\\n    id\\n    balances {\\n      available {\\n        amount\\n        currency\\n        __typename\\n      }\\n      vault {\\n        amount\\n        currency\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"operationName\":\"UserBalances\"}",
	  "method": "POST"
	  //"mode": "cors",
	  //"credentials": "omit"
	}).then(response => {
		return response.json();
	//}).then(function(data) {
	}).then(data => {
		//console.log( data );
		if (data.errors) {
			console.log(red('Get Balance Error'));
			console.log(red('Error: ' +data));
			console.log(red('==========='));
			
			log('<font style="color:red;font-size:15px;">Get Balance Error: '+data+' '+data.errors+'</font>');
			log('<font style="color:red;font-size:15px;">==========</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			
			errTrue = true;
			
			stopp();
			//return
			
		} else {
			var item = data.data.user.balances.find(item => item.available.currency == currency);
				balance = Number(item.available.amount);
				if(checkBalance == true){
					startBalance = balance;
					lastBalance = balance;
					llastBalance = balance;
					lllastBalance = balance;
					last_balance = balance;
					checkBalance = false;
				}
				
				profitTotal = balance - startBalance;
				console.log(green('Balance: '+balance));
				console.log(green('==========='));
				
				log('<font style="color:green;font-size:15px;">Balance: '+balance+' '+currency.toUpperCase()+'</font>');
				log('<font style="color:green;font-size:15px;">==========</font>');
				$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
				
				errTrue = false;
				
				$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');

				start();
		}
	})
	.catch(function(err, data) {
		console.log(red(err));
		console.log(red('=========='));
		
		log('<font style="color:red;font-size:15px;">Get Balance Error: '+err+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		
		errTrue = true;
		//if(run) getBalanceStart();
		if(run) setTimeout(() => {getBalanceStart()},1000);
	})
}
//getBalanceStart();

function list(json){
	//console.log( json );
	if (json.data == null) {
		console.log(red('Get History Error: '+json));
		console.log(red('Get History Error: '+json.errors[0].message));
		console.log(red('=========='));
		log('<font style="color:red;font-size:15px;">Get History Error: '+json.errors[0].message+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');				
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
	} else {
		//console.log(json.data.crashGameList[0].hash.hash);
		historyHashHash = json.data.crashGameList[0].hash.hash;
		crashpoint1 = json.data.crashGameList[0].crashpoint;
		hashhash1 = json.data.crashGameList[0].hash.hash;
		historyPointPoint = (json.data.crashGameList[0].crashpoint).toString() + (json.data.crashGameList[1].crashpoint).toString() + (json.data.crashGameList[2].crashpoint).toString() + (json.data.crashGameList[3].crashpoint).toString() + (json.data.crashGameList[4].crashpoint).toString() + (json.data.crashGameList[5].crashpoint).toString() + (json.data.crashGameList[6].crashpoint).toString() + (json.data.crashGameList[7].crashpoint).toString() + (json.data.crashGameList[8].crashpoint).toString() + (json.data.crashGameList[9].crashpoint).toString();
		
		if(lastHash.indexOf(json.data.crashGameList[0].hash.hash) == -1){		
			lastHash.pop();
			lastHash.push(json.data.crashGameList[0].hash.hash);
			//crashPoint.pop();
			//crashPoint.push(json.data.crashGameList[0].crashpoint);
			//console.log(crashPoint);
			//console.log(lastHash);
		}
		
		doBet();
	}
	if(run) setTimeout(function(){ historybet() },1000);
}
function historybet() {
	if(!conf.b)return; //User---
	//simulateMouseMove();
	let body = {
		"operationName": "CrashGameListHistory",
		"variables":{},
		"query":"query CrashGameListHistory($limit: Int, $offset: Int) {\n  crashGameList(limit: $limit, offset: $offset) {\n    id\n    startTime\n    crashpoint\n    hash {\n      id\n      hash\n      __typename\n    }\n    __typename\n  }\n}\n"
		}
	fetch("https://"+mirror+"/_api/graphql", {
        method: 'post',
        body: JSON.stringify(body),
        headers: {'Content-Type': 'application/json','x-access-token': token},
    })
	.then(res => res.json())
	.then(json => list(json))
	.catch(function(err, json) {
		console.log(red('Get History Error'));
		console.log(red(err));
		console.log(red('=========='));
		
		log('<font style="color:red;font-size:15px;">Get History Error: '+err+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		
		errTrue = true;
		//if(run) historybet();
		if(run) setTimeout(() => {historybet()},1000);
	});
}


//Finish bet - update statistic
function finishBet(){
		if(historyHash != historyHashHash && historyPoint != historyPointPoint && expiredHash.indexOf(lastHash[lastHash.length-1]) == -1){
			historyHash = historyHashHash;
			historyPoint = historyPointPoint;
			expiredHash.pop();
			expiredHash.push(lastHash[lastHash.length-1]);
			
			console.log(crashpoint1); // result multiplier
			console.log(hashhash1); // result hash
			//console.log('==========');
			
			firstMainBetBet++;
			if(firstMainBetBet >= 1) finishBetTrue = false;
			
			if(checkBal == true){
				checkBal = false;
				getBalance1();
			}
						
			if(checkBall == true){
				checkBall = false;
				if(err == false){
					if(Number(crashpoint1) >= payout){
						win = true;
					}else{
						win = false;
					}
					/*
					if(game == 1){
						if(Number(crashpoint1) >= payout){
							win = true;
						}else{
							win = false;
							game = 2;
							firstMartin = 0;
						}
					}else if(game == 2){
						if(Number(crashpoint1) >= payout){
							win = true;
							game = 1;
						}else{
							win = false;
						}
					}
					*/
				}
			}
			/*
			if(Number(crashpoint1) >= payout){
				win = true;
			}else{
				win = false;
			}
			*/
			if(err == true){				
				//if($('#game').val() == '1'){
				/*
				if(game == 1){
					err = false;
					console.log('%c Place Bet Error. Pattern cycle is completed.', 'color:red; font-size:x-large');				
					console.log('%c Started new cycle', 'color:green; font-size:x-large');
					console.log(green('=========='));
					log('<font style="color:red;font-size:15px;">Place Bet Error. Pattern cycle is completed.</font>');
					log('<font style="color:green;font-size:15px;">Started new cycle</font>');
					log('<font style="color:green;font-size:15px;">==========</font>');
					resetDice();
				}
				*/
				/*
				//if($('#game').val() == '2'){
				if(game == 2){
					console.log('%c Place Bet Error', 'color:red; font-size:x-large');
					console.log(red('=========='));
					log('<font style="color:red;font-size:15px;">Place Bet Error</font>');
					log('<font style="color:red;font-size:15px;">==========</font>');
				}
				*/
				console.log('%c Place Bet Error', 'color:red; font-size:x-large');
				console.log(red('=========='));
				log('<font style="color:red;font-size:15px;">Place Bet Error</font>');
				log('<font style="color:red;font-size:15px;">==========</font>');
				$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
			}
			
			//clearInterval(goBetBet);
			//clearInterval(waitBalance);
			
					//var fGo;
					//if($('#game').val() == '1') fGo = 1;
					//if($('#game').val() == '2') fGo = 2;
					//if(firstGo == fGo){
					if(firstGo == 2){
						
						finishBetTrue = false;
						
						var resultMultiplier = Number(crashpoint1);
						//if($('#game').val() == '1') pat.push(resultMultiplier);
						///if(game == 1) pat.push(resultMultiplier);
						/*
						//if($('#game').val() == '1'){
						if(game == 1){
							//if(pat[0]>=1.10) pat.shift();
							if(pat.length > 11){
								pat.shift();
							}
						}
						*/
						
						//console.log('Analysis ...');
						//log('<font style="color:cyan;font-size:15px;">Analysis ...</font>');
						
						//console.log('Game Number: '+gameNumber);
						console.log('Game №: '+cyan(gameNumber));
						//console.log('Multiplier Result: '+resultMultiplier);
						console.log('Crashed: '+cyan(resultMultiplier));
						//console.log('Patterns: '+pat);
						//if($('#game').val() == '1') console.log('Patterns: '+cyan(pat));
						///if(game == 1) console.log('Patterns: '+cyan(pat));
						console.log('==========');
												
						//log('<font style="color:cyan;font-size:15px;">Game №: '+gameNumber+'</font>');
						log('<font style="color:cyan;font-size:15px;">Crashed: '+resultMultiplier+'</font>');
						//if($('#game').val() == '1') log('<font style="color:cyan;font-size:15px;">Patterns: '+pat+'</font>');
						///if(game == 1) log('<font style="color:cyan;font-size:15px;">Patterns: '+pat+'</font>');
						log('<font style="color:cyan;font-size:15px;">==========</font>');
						$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
						
									//Low Risk - 01
									///if(strategy == 'safe-01'){
									//if(game == 2){
										getBalance(function(){
											
											var pr = balance - llastBalance;
											llastBalance = balance;
											if (pr >= 0) {
												win = true;
											}else{
												win = false;
											}
											
											profitTotal = balance - startBalance;
											
											if(win){
												colorChart = 'green';
											}else{
												colorChart = 'red';
											}
											if(firstMainBet){
												//bets++;
												updateChart(bets, profitTotal, colorChart);
											}
											
											if(balance >= lllastBalance) lllastBalance = balance;
											if(lllastBalance - balance >= maxLose) maxLose = lllastBalance - balance;
											
											/*
											console.log(green('Balance: '+balance));
											console.log(green('==========='));
											log('<font style="color:green;font-size:15px;">Balance: '+balance+' '+currency.toUpperCase()+'</font>');
											log('<font style="color:green;font-size:15px;">==========</font>');
											$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
											*/
											
											$('#statistic').html('<span style="float:left;">Coin = '+currency.toLowerCase()+'</span> <span style="float:right;">Game № = '+gameNumber+'</span> <br>   <span style="float:left;">Balance = '+Number(toFixedNo(balance, 8))+'</span> <span style="float:right;">Max Streak = '+maxstreakBelow+'</span> <br>   <span style="float:left;">Profit = '+profitTotal.toFixed(8)+'</span> <span style="float:right;">Max Bet Amount = '+maxBet.toFixed(8)+'</span> <br>   <span style="float:left;">Wagered = '+wagered.toFixed(8)+'</span> <span style="float:right;">Max Lose Amount = '+maxLose.toFixed(8)+'</span>');
										})
						}else{
							finishBetTrue = false;
						}
			}
}
function list1(json){
	//console.log( json );
	if (json.data == null) {
		console.log(red('Get History Error: '+json));
		console.log(red('Get History Error: '+json.errors[0].message));
		console.log(red('=========='));
		log('<font style="color:red;font-size:15px;">Get History Error: '+json.errors[0].message+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');				
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
	} else {
		//console.log(json.data.crashGameList[0].hash.hash);
		historyHashHash = json.data.crashGameList[0].hash.hash;
		crashpoint1 = json.data.crashGameList[0].crashpoint;
		hashhash1 = json.data.crashGameList[0].hash.hash;
		historyPointPoint = (json.data.crashGameList[0].crashpoint).toString() + (json.data.crashGameList[1].crashpoint).toString() + (json.data.crashGameList[2].crashpoint).toString() + (json.data.crashGameList[3].crashpoint).toString() + (json.data.crashGameList[4].crashpoint).toString() + (json.data.crashGameList[5].crashpoint).toString() + (json.data.crashGameList[6].crashpoint).toString() + (json.data.crashGameList[7].crashpoint).toString() + (json.data.crashGameList[8].crashpoint).toString() + (json.data.crashGameList[9].crashpoint).toString();
		
		if(lastHash.indexOf(json.data.crashGameList[0].hash.hash) == -1){		
			lastHash.pop();
			lastHash.push(json.data.crashGameList[0].hash.hash);
			//crashPoint.pop();
			//crashPoint.push(json.data.crashGameList[0].crashpoint);
			//console.log(crashPoint);
			//console.log(lastHash);
		}
		
		finishBet();
	}
	if(finishBetTrue) setTimeout(function(){ historybet1() },1000);
}
function historybet1() {
	if(!conf.b)return; //User---
	//simulateMouseMove();
	let body = {
		"operationName": "CrashGameListHistory",
		"variables":{},
		"query":"query CrashGameListHistory($limit: Int, $offset: Int) {\n  crashGameList(limit: $limit, offset: $offset) {\n    id\n    startTime\n    crashpoint\n    hash {\n      id\n      hash\n      __typename\n    }\n    __typename\n  }\n}\n"
		}
	fetch("https://"+mirror+"/_api/graphql", {
        method: 'post',
        body: JSON.stringify(body),
        headers: {'Content-Type': 'application/json','x-access-token': token},
    })
	.then(res => res.json())
	.then(json => list1(json))
	.catch(function(err, json) {
		console.log(red('Get History Error'));
		console.log(red(err));
		console.log(red('=========='));
		
		log('<font style="color:red;font-size:15px;">Get History Error: '+err+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		
		//errTrue = true;
		//if(run) historybet();
		if(finishBetTrue) setTimeout(() => {historybet1()},1000);
	});
}
//--------------------------


/*
function simulateMouseMove() {
    const simElm = window.document.documentElement;
    const simMouseMove = new Event('mousemove');
    simElm.dispatchEvent(simMouseMove);
}
*/

/*
var seedRand = '';
var minSeedLenght = 10;
var maxSeedLenght = 10;
function randNaturNum(min, max) {
  let rand = min + Math.random() * (max + 1 - min);
  return Math.floor(rand);
}
function str_rand() {
	var position;
	var result = '';
	var words = '_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
	var max_position = words.length - 1;
	var n = randNaturNum(minSeedLenght, maxSeedLenght);
	for(var i = 0; i < n; ++i ) {
		position = Math.floor ( Math.random() * max_position );
		result = result + words.substring(position, position + 1);
	}
	return result;
}

document.getElementById("_seed").onclick = function(){ runSeed = true; resetSeed(); } //Так для расширения
			
function resetSeed() {
	token = $('#token').val();
	mirror = $('#mirror').val();
	if($('#token').val() == ''){
		//log('Input Api Key');
		console.log('Input Api Key');
		log('<font style="color:red;font-size:15px;">Input API Key</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		return;
	}
	seedRand = str_rand();
	fetch('https://'+mirror+'/_api/graphql', {
	  "headers": {
		"accept": "",
		//"accept-language": "ru,en;q=0.9,en-GB;q=0.8,en-US;q=0.7",
		"content-type": "application/json",
		//"sec-ch-ua": "\" Not;A Brand\";v=\"99\", \"Microsoft Edge\";v=\"91\", \"Chromium\";v=\"91\"",
		//"sec-ch-ua-mobile": "?0",
		//"sec-fetch-dest": "empty",
		//"sec-fetch-mode": "cors",
		//"sec-fetch-site": "same-site",
		"x-access-token": token
		//"x-language": "ru",
		//"x-lockdown-token": ""
	  },
	  //"referrer": "https://"+mirror+"/",
	  //"referrerPolicy": "strict-origin-when-cross-origin",
	  "body": `{\"operationName\":\"RotateSeedPair\",\"variables\":{\"seed\":\"${seedRand}\"},\"query\":\"mutation RotateSeedPair($seed: String!) {\\n  rotateSeedPair(seed: $seed) {\\n    clientSeed {\\n      user {\\n        id\\n        activeClientSeed {\\n          id\\n          seed\\n          __typename\\n        }\\n        activeServerSeed {\\n          id\\n          nonce\\n          seedHash\\n          nextSeedHash\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\"}`,
	  "method": "POST"
	  //"mode": "cors",
	  //"credentials": "omit"
	}).then(response => {
		return response.json();
	//}).then(function(data) {
	}).then(data => {
		//console.log( data );
		if(data.data == null){
			console.log(red('Reset Seed Error: '+data));
			console.log(red('Reset Seed Error: '+data.errors[0].message));
			console.log(red('=========='));
			log('<font style="color:red;font-size:15px;">Reset Seed Error: '+data.errors[0].message+'</font>');
			log('<font style="color:red;font-size:15px;">==========</font>');				
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		}else{
			console.log('Resetting Seed');
			//log('Resetting Seed');
			log('<font style="color:white;font-size:15px;">Resetting Seed</font>');
			$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		}
	})
	.catch(function(err) {
		console.log(red('Reset Seed Error'));
		console.log(red(err));
		console.log(red('=========='));
		
		//console.log(err);
		//log(err);
		log('<font style="color:red;font-size:15px;">Reset Seed Error: '+err+'</font>');
		log('<font style="color:red;font-size:15px;">==========</font>');
		$('#log').stop().animate({ scrollTop: $('#log')[0].scrollHeight });
		
		if (runSeed) setTimeout(() => {resetSeed()},1000);
	})
}
*/

